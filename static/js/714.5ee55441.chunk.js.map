{"version":3,"file":"static/js/714.5ee55441.chunk.js","mappings":"yKACA,G,QAA0B,0BAA1B,EAA2D,uBAA3D,EAAyF,sBAAzF,EAAwH,wBAAxH,EAA2J,0BAA3J,EAA+L,yBAA/L,EAAmO,0B,SCMtNA,EAAU,SAACC,GACpB,OACI,gBAAKC,UAAWC,EAAhB,SAA4BF,EAAMG,Q,UCA7BC,EAAO,SAACJ,GACjB,IAAIK,EAAO,YAAcL,EAAMM,GAC/B,OACI,gBAAKL,UAAWC,EAAhB,UACI,SAAC,KAAD,CAASK,GAAIF,EAAMG,gBAAiBN,EAApC,SAA+CF,EAAMS,U,uCCoB3DC,GAAcC,EAAAA,EAAAA,IAAc,IAW5BC,GAAsBC,EAAAA,EAAAA,GAAmC,CAC3DC,KAAO,WADiBD,EAVL,SAACb,GACpB,OACI,kBAAMe,SAAUf,EAAMgB,aAAtB,WACI,SAACC,EAAA,EAAD,CAAOhB,UAAWC,EAAYgB,UAAWC,EAAAA,EAClCC,SAAU,CAACC,EAAAA,GAASX,GACpBD,KAAK,UAAUa,YAAY,aAClC,0CASZ,EAxCgB,SAACtB,GACb,IAGIuB,EAAavB,EAAMwB,YAAYC,MAAMC,KAAI,SAAAC,GAAI,OAAG,SAACvB,EAAD,CAAoBK,KAAMkB,EAAKlB,KAAMH,GAAIqB,EAAKrB,IAAnCqB,EAAKrB,OAEhEsB,EAAgB5B,EAAMwB,YAAYK,SAASH,KAAI,SAAAI,GAAO,OAAI,SAAC/B,EAAD,CAASI,KAAM2B,EAAQA,aACrF,OACI,iBAAK7B,UAAWC,EAAhB,WACI,gBAAKD,UAAWC,EAAhB,SACKqB,KAEL,iBAAKtB,UAAWC,EAAhB,UACK0B,GACD,SAAChB,EAAD,CAAqBG,SAbd,SAACgB,GACpB/B,EAAMgC,WAAWD,EAASD,mB,8BCiB9B,GAAeG,EAAAA,EAAAA,KACXC,EAAAA,EAAAA,KAZwB,SAACC,GACzB,MAAO,CACHX,YAAcW,EAAMC,mBAGH,SAACC,GACtB,MAAO,CACHL,WAAa,SAACF,GAAuBO,GAASC,EAAAA,EAAAA,GAAgBR,SAMlES,EAAAA,EAFJ,CAGEC","sources":["webpack://samurai-way/./src/Components/Dialogs/Dialogs.module.css?db5c","Components/Dialogs/Message/Message.tsx","Components/Dialogs/Users/Users.tsx","Components/Dialogs/Dialogs.tsx","Components/Dialogs/DialogsContainer.tsx"],"sourcesContent":["// extracted by mini-css-extract-plugin\nexport default {\"dialogs\":\"Dialogs_dialogs__T85VN\",\"users\":\"Dialogs_users__Xu-7R\",\"user\":\"Dialogs_user__Eqyjr\",\"active\":\"Dialogs_active__U7m7d\",\"messages\":\"Dialogs_messages__wz3e2\",\"message\":\"Dialogs_message__nd2rK\",\"textArea\":\"Dialogs_textArea__zCRFl\",\"addBtn\":\"Dialogs_addBtn__FhziH\"};","import React from 'react';\r\nimport d from \"./../Dialogs.module.css\"\r\n\r\ntype MessagePropsType = {\r\n    text: string\r\n}\r\n\r\nexport const Message = (props: MessagePropsType) => {\r\n    return (\r\n        <div className={d.message}>{props.text}</div>\r\n    )\r\n}\r\n\r\n","import React from 'react';\r\nimport {NavLink} from 'react-router-dom';\r\nimport d from \"./../Dialogs.module.css\"\r\n\r\ntype UserPropsType = {\r\n    name: string\r\n    id: number\r\n\r\n}\r\nexport const User = (props: UserPropsType) => {\r\n    let path = \"/dialogs/\" + props.id;\r\n    return (\r\n        <div className={d.user}>\r\n            <NavLink to={path} activeClassName={d.active}>{props.name}</NavLink>\r\n        </div>\r\n    )\r\n}","import React, {ChangeEvent} from 'react';\r\nimport d from \"./Dialogs.module.css\"\r\nimport { DialogsPropsType } from './DialogsContainer';\r\nimport {Message} from \"./Message/Message\";\r\nimport {User} from \"./Users/Users\";\r\nimport {Field, InjectedFormProps, reduxForm} from \"redux-form\";\r\nimport {TextArea} from \"../../utils/fromControl/FormsControl\";\r\nimport {maxLenCreator, maxLength30, required} from \"../../utils/validators/validators\";\r\n\r\nconst Dialogs = (props:DialogsPropsType) => {\r\n    const addMessage = (formData : AddMessageFormPropsType) => {\r\n    props.addMessage(formData.message)\r\n    }\r\n    let userRender = props.dialogsPage.users.map(user=> <User key={user.id} name={user.name} id={user.id}/>)\r\n\r\n    let messageRender = props.dialogsPage.messages.map(message => <Message text={message.message}/>)\r\n    return (\r\n        <div className={d.dialogs}>\r\n            <div className={d.users}>\r\n                {userRender}\r\n            </div>\r\n            <div className={d.messages}>\r\n                {messageRender}\r\n                <AddMessageReduxForm onSubmit={addMessage}/>\r\n            </div>\r\n        </div>\r\n    );\r\n};\r\n\r\n//\r\ntype AddMessageFormPropsType = {\r\n    message : string\r\n}\r\nconst maxLength50 = maxLenCreator(50)\r\nconst AddMessageForm = (props : InjectedFormProps<AddMessageFormPropsType>) => {\r\n    return (\r\n        <form onSubmit={props.handleSubmit}>\r\n            <Field className={d.textArea} component={TextArea}\r\n                   validate={[required,maxLength50]}\r\n                   name=\"message\" placeholder=\"message\"></Field>\r\n            <button>add</button>\r\n        </form>\r\n    )\r\n}\r\nconst AddMessageReduxForm = reduxForm<AddMessageFormPropsType>({\r\n    form : \"message\"\r\n})(AddMessageForm)\r\n\r\n\r\nexport default Dialogs;\r\n","import React, {ComponentType} from 'react';\r\nimport {compose, Dispatch} from \"redux\";\r\nimport Dialogs from \"./Dialogs\";\r\n\r\nimport {connect} from \"react-redux\";\r\nimport {addNewMessageAC, DialogsPageType} from \"../../State/dialogsReducer\";\r\nimport {AppRootStateType} from \"../../State/Redux-Store\";\r\nimport {withAuthRedirect} from '../../HOC/WithAuthRedirect';\r\n\r\ntype MapStatePropsType = {\r\n    dialogsPage : DialogsPageType\r\n}\r\n\r\ntype MapDispatchPropsType = {\r\n    addMessage: (message : string) => void\r\n}\r\nexport type DialogsPropsType = MapDispatchPropsType & MapStatePropsType\r\nlet mapStateToDialogProps = (state :AppRootStateType ) : MapStatePropsType => {\r\n    return {\r\n        dialogsPage : state.dialogsReducer,\r\n    }\r\n}\r\nlet mapDispatchToProps = (dispatch: Dispatch) : MapDispatchPropsType => {\r\n    return {\r\n        addMessage : (message : string) => { dispatch(addNewMessageAC(message)) }\r\n    }\r\n}\r\n\r\nexport default compose<ComponentType>(\r\n    connect(mapStateToDialogProps,mapDispatchToProps),\r\n    withAuthRedirect\r\n)(Dialogs)"],"names":["Message","props","className","d","text","User","path","id","to","activeClassName","name","maxLength50","maxLenCreator","AddMessageReduxForm","reduxForm","form","onSubmit","handleSubmit","Field","component","TextArea","validate","required","placeholder","userRender","dialogsPage","users","map","user","messageRender","messages","message","formData","addMessage","compose","connect","state","dialogsReducer","dispatch","addNewMessageAC","withAuthRedirect","Dialogs"],"sourceRoot":""}